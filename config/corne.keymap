#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer Definitions
#define DEFAULT 0
#define NAVI 1
#define MEDIA 2
#define NUM 3
#define FUNC 4
#define QWY 5

// TODO
// Change right index LSFT on numbers layer to shift to alternative shift layer, 
// with everything shifted except the left thumb keys being ( )
// (waiting on ZMK extended keycode support)

/ {
//  Homerow mod held behaviour 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };


// HELD on each layer shows which key(s) are being held to access that layer
// #'s signify the split

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ----------------------------------------------------------------------------------------------------------------
// |   ~    |    Q    |   W    |   F    |    P   |   B   | # |   J   |    L   |    U    |    Y   |   ;    |  F4   |
// |  ESC   |  A/LGUI | R/LALT | S/LCTL | T/LSFT |   G   | # |   M   | N/LSFT | E/LCTRL | I/LALT | O/LGUI |   '   |
// | LSFT   |    Z    | X/RALT | C/RCTL |    V   |   D   | # |   K   |    H   | ,/RCTRL | ./LALT |   /    |  qwerty_layer |
//               | LT MEDIA ESC    | LT NAVI TAB | SPC   | # |  RET  | LT NUM BKSP | LT FUNC DEL |

            bindings = <
&kp TILDE   &kp Q        &kp W           &kp F          &kp P        &kp B     &kp J          &kp L          &kp U        &kp Y        &kp SCLN     &kp BKSP
&kp ESC     &hm LGUI A   &hm LALT R      &hm LCTL S     &hm LSFT T   &kp G     &kp M          &hm LSFT N     &hm LCTL E   &hm LALT I   &hm LGUI O   &kp APOS
&kp LSFT    &kp Z        &hm RALT X      &hm RCTL C     &kp D        &kp V     &kp K          &kp H          &kp CMMA     &kp DOT      &kp FSLH     &to 5
                         &lt MEDIA ESC   &lt NAVI TAB   &kp SPC      &kp RET   &lt NUM BKSP   &lt FUNC DEL
            >;
        };

        navi_layer {
// ---------------------------------------------------------------------------------------
// |        |         |        |        |        |       | # |       |  UNDO  |  CUT  |  COPY  |  PASTE  |       |       |
// |        |   LGUI  |  LALT  |  LCTL  |  LSFT  |       | # |       |  LFT   |  DWN  |   UP   |   RGT   |  ENT  |       |
// |        |         |  RALT  |  RCTL  |        |       | # |  INS  |  HOME  |  PGDN |  PGUP  |   END   |       |       |
//                             |        |        |       | # |       |        |       |

            bindings = <
&trans   &trans     &trans     &trans     &trans     &trans   &trans    &kp UNDO   &kp CUT    &kp COPY   &kp PSTE   &trans    &trans    
&trans   &kp LGUI   &kp LALT   &kp LCTL   &kp LSFT   &trans   &trans    &kp LARW   &kp DARW   &kp UARW   &kp RARW   &kp RET   &trans
&trans   &trans     &kp RALT   &kp RCTL   &trans     &trans   &kp INS   &kp HOME   &kp PGDN   &kp PGUP   &kp END    &trans    &trans
                               &trans     &trans     &trans   &trans    &trans     &trans
            >;  
        };

        media_layer {
// ----------------------------------------------------------------------------------------------------------------
// |  bt clr  | bt 0 | bt 1 | bt 2 | bt 3 | bt 4 | # |        |        |        |        |        |       |       |
// |          | LGUI | LALT | LCTL | LSFT |      | # |        |  PREV  |  VOLD  |  VOLU  |  NEXT  |       |       |
// |          |      | RALT | RCTL |      |      | # |        |        |        |        |        |       |       |
//                          |      |      |      | # |  STOP  |  PLAY  |  MUTE  |

            bindings = <
&bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans       &trans       &trans       &trans       &trans       &trans    
&trans       &kp LGUI       &kp LALT       &kp LCTL       &kp LSFT       &trans         &trans       &kp M_PREV   &kp M_VOLD   &kp M_VOLU   &kp M_NEXT   &trans    
&trans       &trans         &kp RALT       &kp RCTL       &trans         &trans         &trans       &trans       &trans       &trans       &trans       &trans
                            &trans         &trans         &trans         &kp M_STOP     &kp M_PLAY   &kp M_MUTE
            >;
        };

        num_layer {
// ---------------------------------------------------------------------------------
// |     |  [{  |  7  |  8  |  9  |  ]}  | # |     |      |      |      |      |     |
// |     |  @   |  4  |  5  |  6  |  =+  | # |     |  SFT | CTRL | LALT | LGUI |     |
// |     |  #~  |  1  |  2  |  3  |  \|  | # |     |      |      | RALT |      |     | 
//                    |  .  |  0  |  -_  | # | WIN | HELD |      |

            bindings = <
&trans   &kp LBKT   &kp NUM_7   &kp NUM_8   &kp NUM_9   &kp RBKT      &trans    &trans     &trans     &trans     &trans     &trans    
&trans   &kp QUOT   &kp NUM_4   &kp NUM_5   &kp NUM_6   &kp EQL       &trans    &kp LSFT   &kp LCTL   &kp LALT   &kp LGUI   &trans
&trans   &trans     &kp NUM_1   &kp NUM_2   &kp NUM_3   &kp BSLH      &trans    &trans     &kp RCTL   &kp RALT   &trans     &trans    
                                &kp DOT     &kp NUM_0   &kp MINUS     &kp RET   &trans     &trans
            >;
        };

        func_layer {
// -------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9  | PTSRN | # |     |     |      |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6  | SCRLL | # |     | SFT | CTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3  | PAUSE | # |     |     |      | RALT |      |     | 
//                     |  ESC |  TAB |  SPC  | # | RET |     |      |

            bindings = <
&trans   &kp F12   &kp F7   &kp F8   &kp F9   &kp PSCRN         &trans    &trans     &trans     &trans     &trans     &trans    
&trans   &kp F11   &kp F4   &kp F5   &kp F6   &kp SLCK          &trans    &kp LSFT   &kp LCTL   &kp LALT   &kp LGUI   &trans
&trans   &kp F10   &kp F1   &kp F2   &kp F3   &kp PAUSE_BREAK   &trans    &trans     &kp RALT   &trans     &trans     &trans    
                            &trans   &trans   &kp SPC           &kp RET   &trans     &trans
            >;
        };

        qwerty_layer {
// ---------------------------------------------------------------------------------------------------------------------------
// |    ~     |    q    |    w    |    e    |    r    |    t    | # |    y    |    u    |    i    |    o    |    p    |    BSK  |
// |          | a/LGUI  |  s/LALT |  d/LCTL |    f    |    g    | # |    h    |    j    |    k    |    l    |    ;    |    '    |
// |   LSFT   |    z    |    x    |    c    |    v    |    b    | # |    n    |    m    |    ,    |    .    |    /    |default_layer| 
//                                |   ESC   |  TAB    |   SPC   | # |   RET   |   BKSP  |   DEL   |

            bindings = <
&kp TILDE    &kp Q        &kp W        &kp E         &kp R        &kp T      &kp Y      &kp U        &kp I        &kp O        &kp P           &kp     
&trans       &hm LGUI A   &hm LALT S   &hm LCTRL D   &hm LSFT F   &kp G      &kp H      &hm LSFT J   &hm LCTL K   &hm LALT L   &hm LGUI SCLN   &kp APOS 
&kp LSFT     &kp Z        &kp X        &kp C         &kp V        &kp B      &kp N      &kp M        &kp CMMA     &kp DOT      &kp FSLH        &to 0    
                                       &kp ESC       &kp TAB      &kp SPC    &kp RET    &kp BKSP     &kp DEL
            >;
        };


    };
};

