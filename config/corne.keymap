#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer Definitions
#define DEFAULT 0
#define NAVI 1
#define MEDIA 2
#define NUM 3
#define FUNC 4
#define NONE 0

// TODO
// Change right index LSFT on numbers layer to shift to alternative shift layer, 
// with everything shifted except the left thumb keys being ( )
// (waiting on ZMK extended keycode support)

/ {
//  Homerow mod held behaviour 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <120>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };


// HELD on each layer shows which key(s) are being held to access that layer
// #'s signify the split

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ---------------------------------------------------------------------------------------------------------
// |   ~  |   Q    |   W    |   F    |    P   |   B   | # |   J   |    L   |    U    |    Y   |   ;    |  F4   |
// |  ESC | A/LGUI | R/LALT | S/LCTL | T/LSFT |   G   | # |   M   | N/LSFT | E/LCTRL | I/LALT | O/LGUI |   '   |
// | LSFT |   Z    |   X    |   C    |    V   |   D   | # |   K   |    H   |    ,    |    .   |   /    | ENTER |
//               | LT MEDIA ESC | LT NAVI TAB |  SPC  | # |  RET  | LT NUM BKSP | LT FUNC DEL |

            bindings = <
&kp TILDE   &kp Q        &kp W        &kp F        &kp P        &kp B   &kp J   &kp L        &kp U        &kp Y        &kp SCLN     &kp 
&kp ESC     &hm LGUI A   &hm LALT R   &hm LCTL S   &hm LSFT T   &kp G   &kp M   &hm LSFT N   &hm LCTL E   &hm LALT I   &hm LGUI O   &kp APOS
&kp LSFT    &kp Z        &hm RALT X   &hm RCTL C   &kp D        &kp V   &kp K   &kp H        &kp CMMA     &kp DOT      &kp FSLH     &kp RET
                               &lt MEDIA ESC   &lt NAVI TAB   &kp SPC   &kp RET   &lt NUM BKSP   &lt FUNC DEL
            >;
        };

        navigation {
// ---------------------------------------------------------------------------------------
// |     |      |      |       |      |      | # | UNDO | CUT  | COPY  | PASTE |     |     |
// |     | LGUI | LALT | LCTL  | LSFT | TAB  | # | LFT  | DWN  |  UP   |  RGT  | ENT |     |
// |     |      | RALT |       |      |      | # | HOME | PGDN | PGUP  |  END  |     |     |
//                     | BTCLR | HELD | LSFT | # | SPC  | BKSP |  DEL  |

            bindings = <
&trans     &trans    &trans     &trans      &trans     &trans        &kp UNDO  &kp CUT   &kp COPY  &kp PSTE  &trans    &trans    
&trans     &kp LGUI  &kp LALT   &kp LCTL    &kp LSFT   &kp TAB       &kp LARW  &kp DARW  &kp UARW  &kp RARW  &kp RET   &trans
&kp LSFT   &trans    &trans     &trans      &trans     &trans        &kp HOME  &kp PGDN  &kp PGUP  &kp END   &trans    &trans
                                &bt BT_CLR  &trans     &kp LSFT      &kp SPC   &kp BKSP  &kp DEL
            >;  
        };

        media_keys {
// -------------------------------------------------------------------------------------
// |     |      |      |      |      |      | # |      |      |      |      |     |     |
// |     | LGUI | LALT | LCTL | LSFT | TAB  | # | PREV | VOLD | VOLU | NEXT |     |     |
// |     |      | RALT |      |      |      | # |      |      |      |      |     |     |
//                     | HELD |      | LSFT | # | STOP | PLAY | MUTE |

            bindings = <
&trans     &trans    &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans    &trans    
&trans     &kp LGUI  &kp LALT   &kp LCTL   &kp LSFT   &kp TAB       &cp M_PREV &cp M_VOLD &cp M_VOLU &cp M_NEXT &trans    &trans
&kp LSFT   &trans    &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans    &trans
                                &trans     &trans     &kp LSFT      &cp M_STOP &cp M_PLAY &cp M_MUTE
            >;
        };

        numbers {
// ---------------------------------------------------------------------------------
// |     |  [{ |  7  |  8  |  9  |  ]}  | # |     |      |      |      |      |     |
// |     |  '@ |  4  |  5  |  6  |  =+  | # |     |  SFT | CTRL | LALT | LGUI |     |
// |     |  #~ |  1  |  2  |  3  |  \|  | # |     |      |      | RALT |      |     | 
//                   |  .  |  0  |  -_  | # | WIN | HELD |      |

            bindings = <
&trans    &kp LBKT  &kp NUM_7    &kp NUM_8    &kp NUM_9    &kp RBKT      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp QUOT  &kp NUM_4    &kp NUM_5    &kp NUM_6    &kp EQL       &trans    &kp LSFT  &kp LCTL &kp LALT  &kp LGUI  &trans
&trans    &trans    &kp NUM_1    &kp NUM_2    &kp NUM_3    &kp BSLH      &trans    &trans   &kp RALT  &trans    &trans    &trans    
                                 &kp DOT      &kp NUM_0    &kp MINUS     &kp LGUI   &trans   &trans
            >;
        };

        function_keys {
// -------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9  | PTSRN | # |     |     |      |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6  | SCRLL | # |     | SFT | CTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3  | PAUSE | # |     |     |      | RALT |      |     | 
//                     |      |      |  TAB  | # | WIN |     | HELD |

            bindings = <
&trans    &kp F12    &kp F7    &kp F8    &kp F9    &kp PRSC      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp F11    &kp F4    &kp F5    &kp F6    &trans        &trans    &kp LSFT &kp LCTL  &kp LALT  &kp LGUI  &trans
&trans    &kp F10    &kp F1    &kp F2    &kp F3    &trans        &trans    &trans   &kp RALT  &trans    &trans    &trans    
                               &trans    &trans    &kp LSFT      &kp LGUI   &trans   &trans
            >;
        };
    };
};

